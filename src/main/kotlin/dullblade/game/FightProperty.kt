package dullblade.game

import java.util.stream.Stream
import kotlin.collections.set

enum class FightProperty(val id: Int) {
    FIGHT_PROP_NONE(0),
    FIGHT_PROP_BASE_HP(1),
    FIGHT_PROP_HP(2),
    FIGHT_PROP_HP_PERCENT(3),
    FIGHT_PROP_BASE_ATTACK(4),
    FIGHT_PROP_ATTACK(5),
    FIGHT_PROP_ATTACK_PERCENT(6),
    FIGHT_PROP_BASE_DEFENSE(7),
    FIGHT_PROP_DEFENSE(8),
    FIGHT_PROP_DEFENSE_PERCENT(9),
    FIGHT_PROP_BASE_SPEED(10),
    FIGHT_PROP_SPEED_PERCENT(11),
    FIGHT_PROP_HP_MP_PERCENT(12),
    FIGHT_PROP_ATTACK_MP_PERCENT(13),
    FIGHT_PROP_CRITICAL(20),
    FIGHT_PROP_ANTI_CRITICAL(21),
    FIGHT_PROP_CRITICAL_HURT(22),
    FIGHT_PROP_CHARGE_EFFICIENCY(23),
    FIGHT_PROP_ADD_HURT(24),
    FIGHT_PROP_SUB_HURT(25),
    FIGHT_PROP_HEAL_ADD(26),
    FIGHT_PROP_HEALED_ADD(27),
    FIGHT_PROP_ELEMENT_MASTERY(28),
    FIGHT_PROP_PHYSICAL_SUB_HURT(29),
    FIGHT_PROP_PHYSICAL_ADD_HURT(30),
    FIGHT_PROP_DEFENCE_IGNORE_RATIO(31),
    FIGHT_PROP_DEFENCE_IGNORE_DELTA(32),
    FIGHT_PROP_FIRE_ADD_HURT(40),
    FIGHT_PROP_ELEC_ADD_HURT(41),
    FIGHT_PROP_WATER_ADD_HURT(42),
    FIGHT_PROP_GRASS_ADD_HURT(43),
    FIGHT_PROP_WIND_ADD_HURT(44),
    FIGHT_PROP_ROCK_ADD_HURT(45),
    FIGHT_PROP_ICE_ADD_HURT(46),
    FIGHT_PROP_HIT_HEAD_ADD_HURT(47),
    FIGHT_PROP_FIRE_SUB_HURT(50),
    FIGHT_PROP_ELEC_SUB_HURT(51),
    FIGHT_PROP_WATER_SUB_HURT(52),
    FIGHT_PROP_GRASS_SUB_HURT(53),
    FIGHT_PROP_WIND_SUB_HURT(54),
    FIGHT_PROP_ROCK_SUB_HURT(55),
    FIGHT_PROP_ICE_SUB_HURT(56),
    FIGHT_PROP_EFFECT_HIT(60),
    FIGHT_PROP_EFFECT_RESIST(61),
    FIGHT_PROP_FREEZE_RESIST(62),
    FIGHT_PROP_TORPOR_RESIST(63),
    FIGHT_PROP_DIZZY_RESIST(64),
    FIGHT_PROP_FREEZE_SHORTEN(65),
    FIGHT_PROP_TORPOR_SHORTEN(66),
    FIGHT_PROP_DIZZY_SHORTEN(67),
    FIGHT_PROP_MAX_FIRE_ENERGY(70),
    FIGHT_PROP_MAX_ELEC_ENERGY(71),
    FIGHT_PROP_MAX_WATER_ENERGY(72),
    FIGHT_PROP_MAX_GRASS_ENERGY(73),
    FIGHT_PROP_MAX_WIND_ENERGY(74),
    FIGHT_PROP_MAX_ICE_ENERGY(75),
    FIGHT_PROP_MAX_ROCK_ENERGY(76),
    FIGHT_PROP_SKILL_CD_MINUS_RATIO(80),
    FIGHT_PROP_SHIELD_COST_MINUS_RATIO(81),
    FIGHT_PROP_CUR_FIRE_ENERGY(1000),
    FIGHT_PROP_CUR_ELEC_ENERGY(1001),
    FIGHT_PROP_CUR_WATER_ENERGY(1002),
    FIGHT_PROP_CUR_GRASS_ENERGY(1003),
    FIGHT_PROP_CUR_WIND_ENERGY(1004),
    FIGHT_PROP_CUR_ICE_ENERGY(1005),
    FIGHT_PROP_CUR_ROCK_ENERGY(1006),
    FIGHT_PROP_CUR_HP(1010),
    FIGHT_PROP_MAX_HP(2000),
    FIGHT_PROP_CUR_ATTACK(2001),
    FIGHT_PROP_CUR_DEFENSE(2002),
    FIGHT_PROP_CUR_SPEED(2003),
    FIGHT_PROP_NONEXTRA_ATTACK(3000),
    FIGHT_PROP_NONEXTRA_DEFENSE(3001),
    FIGHT_PROP_NONEXTRA_CRITICAL(3002),
    FIGHT_PROP_NONEXTRA_ANTI_CRITICAL(3003),
    FIGHT_PROP_NONEXTRA_CRITICAL_HURT(3004),
    FIGHT_PROP_NONEXTRA_CHARGE_EFFICIENCY(3005),
    FIGHT_PROP_NONEXTRA_ELEMENT_MASTERY(3006),
    FIGHT_PROP_NONEXTRA_PHYSICAL_SUB_HURT(3007),
    FIGHT_PROP_NONEXTRA_FIRE_ADD_HURT(3008),
    FIGHT_PROP_NONEXTRA_ELEC_ADD_HURT(3009),
    FIGHT_PROP_NONEXTRA_WATER_ADD_HURT(3010),
    FIGHT_PROP_NONEXTRA_GRASS_ADD_HURT(3011),
    FIGHT_PROP_NONEXTRA_WIND_ADD_HURT(3012),
    FIGHT_PROP_NONEXTRA_ROCK_ADD_HURT(3013),
    FIGHT_PROP_NONEXTRA_ICE_ADD_HURT(3014),
    FIGHT_PROP_NONEXTRA_FIRE_SUB_HURT(3015),
    FIGHT_PROP_NONEXTRA_ELEC_SUB_HURT(3016),
    FIGHT_PROP_NONEXTRA_WATER_SUB_HURT(3017),
    FIGHT_PROP_NONEXTRA_GRASS_SUB_HURT(3018),
    FIGHT_PROP_NONEXTRA_WIND_SUB_HURT(3019),
    FIGHT_PROP_NONEXTRA_ROCK_SUB_HURT(3020),
    FIGHT_PROP_NONEXTRA_ICE_SUB_HURT(3021),
    FIGHT_PROP_NONEXTRA_SKILL_CD_MINUS_RATIO(3022),
    FIGHT_PROP_NONEXTRA_SHIELD_COST_MINUS_RATIO(3023),
    FIGHT_PROP_NONEXTRA_PHYSICAL_ADD_HURT(3024);

    companion object {
        private val map: MutableMap<Int, FightProperty> = HashMap()
        private val stringMap: MutableMap<String, FightProperty> = HashMap()
        val fightProps = intArrayOf(1, 4, 7, 20, 21, 22, 23, 26, 27, 28, 29, 30, 40, 41,
            42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 2000, 2001, 2002, 2003, 1010)

        init {
            Stream.of(*values()).forEach { e: FightProperty ->
                map.put(e.id, e)
                stringMap[e.name] = e
            }
        }

        fun getPropById(value: Int): FightProperty = map.getOrDefault(value, FIGHT_PROP_NONE)

        @JvmStatic
        fun getPropByName(name: String?): FightProperty = stringMap.getOrDefault(name, FIGHT_PROP_NONE)

        @JvmStatic
        fun getPropByShortName(name: String, default: FightProperty = FIGHT_PROP_NONE) =
            shortNameMap.getOrDefault(name, default)

        @JvmStatic
        val shortNames: Set<String>
            get() = shortNameMap.keys

        // This was originally for relic properties so some names might not be applicable for e.g. setstats
        val shortNameMap = mapOf( // Normal relic stats
            "hp" to FIGHT_PROP_HP,
            "atk" to FIGHT_PROP_ATTACK,
            "def" to FIGHT_PROP_DEFENSE,
            "hp%" to FIGHT_PROP_HP_PERCENT,
            "atk%" to FIGHT_PROP_ATTACK_PERCENT,
            "def%" to FIGHT_PROP_DEFENSE_PERCENT,
            "em" to FIGHT_PROP_ELEMENT_MASTERY,
            "er" to FIGHT_PROP_CHARGE_EFFICIENCY,
            "hb" to FIGHT_PROP_HEAL_ADD,
            "heal" to FIGHT_PROP_HEAL_ADD,
            "cd" to FIGHT_PROP_CRITICAL_HURT,
            "cdmg" to FIGHT_PROP_CRITICAL_HURT,
            "cr" to FIGHT_PROP_CRITICAL,
            "crate" to FIGHT_PROP_CRITICAL,
            "phys%" to FIGHT_PROP_PHYSICAL_ADD_HURT,
            "dendro%" to FIGHT_PROP_GRASS_ADD_HURT,
            "geo%" to FIGHT_PROP_ROCK_ADD_HURT,
            "anemo%" to FIGHT_PROP_WIND_ADD_HURT,
            "hydro%" to FIGHT_PROP_WATER_ADD_HURT,
            "cryo%" to FIGHT_PROP_ICE_ADD_HURT,
            "electro%" to FIGHT_PROP_ELEC_ADD_HURT,
            "pyro%" to FIGHT_PROP_FIRE_ADD_HURT,  // Other stats
            "maxhp" to FIGHT_PROP_MAX_HP,
            "dmg" to FIGHT_PROP_ADD_HURT,  // This seems to get reset after attacks
            "cdr" to FIGHT_PROP_SKILL_CD_MINUS_RATIO,
            "heali" to FIGHT_PROP_HEALED_ADD,
            "shield" to FIGHT_PROP_SHIELD_COST_MINUS_RATIO,
            "defi" to FIGHT_PROP_DEFENCE_IGNORE_RATIO,
            "resall" to FIGHT_PROP_SUB_HURT,  // This seems to get reset after attacks
            "resanemo" to FIGHT_PROP_WIND_SUB_HURT,
            "rescryo" to FIGHT_PROP_ICE_SUB_HURT,
            "resdendro" to FIGHT_PROP_GRASS_SUB_HURT,
            "reselectro" to FIGHT_PROP_ELEC_SUB_HURT,
            "resgeo" to FIGHT_PROP_ROCK_SUB_HURT,
            "reshydro" to FIGHT_PROP_WATER_SUB_HURT,
            "respyro" to FIGHT_PROP_FIRE_SUB_HURT,
            "resphys" to FIGHT_PROP_PHYSICAL_SUB_HURT
        )

        private val flatProps = listOf(
            FIGHT_PROP_BASE_HP,
            FIGHT_PROP_HP,
            FIGHT_PROP_BASE_ATTACK,
            FIGHT_PROP_ATTACK,
            FIGHT_PROP_BASE_DEFENSE,
            FIGHT_PROP_DEFENSE,
            FIGHT_PROP_HEALED_ADD,
            FIGHT_PROP_CUR_FIRE_ENERGY,
            FIGHT_PROP_CUR_ELEC_ENERGY,
            FIGHT_PROP_CUR_WATER_ENERGY,
            FIGHT_PROP_CUR_GRASS_ENERGY,
            FIGHT_PROP_CUR_WIND_ENERGY,
            FIGHT_PROP_CUR_ICE_ENERGY,
            FIGHT_PROP_CUR_ROCK_ENERGY,
            FIGHT_PROP_CUR_HP,
            FIGHT_PROP_MAX_HP,
            FIGHT_PROP_CUR_ATTACK,
            FIGHT_PROP_CUR_DEFENSE
        )

        @JvmStatic
        fun isPercentage(prop: FightProperty): Boolean {
            return !flatProps.contains(prop)
        }
    }
}

enum class Stat(val id: Int) {
    NONE(0),
    BASE_HP(1),
    HP(2),
    HP_PERCENT(3),
    BASE_ATK(4),
    ATK(5),
    ATK_PERCENT(6),
    BASE_DEF(7),
    DEF(8),
    DEF_PERCENT(9),
    BASE_SPEED(10),
    SPEED_PERCENT(11),
    HP_MP_PERCENT(12),
    ATK_MP_PERCENT(13),
    CRITICAL(20),
    ANTI_CRITICAL(21),
    CRITICAL_HURT(22),
    ER(23),
    ADD_HURT(24),
    SUB_HURT(25),
    HEAL_ADD(26),
    HEALED_ADD(27),
    ELEMENT_MASTERY(28),
    PHYSICAL_SUB_HURT(29),
    PHYSICAL_ADD_HURT(30),
    DEFENCE_IGNORE_RATIO(31),
    DEFENCE_IGNORE_DELTA(32),
    FIRE_ADD_HURT(40),
    ELEC_ADD_HURT(41),
    WATER_ADD_HURT(42),
    GRASS_ADD_HURT(43),
    WIND_ADD_HURT(44),
    ROCK_ADD_HURT(45),
    ICE_ADD_HURT(46),
    HIT_HEAD_ADD_HURT(47),
    FIRE_SUB_HURT(50),
    ELEC_SUB_HURT(51),
    WATER_SUB_HURT(52),
    GRASS_SUB_HURT(53),
    WIND_SUB_HURT(54),
    ROCK_SUB_HURT(55),
    ICE_SUB_HURT(56),
    EFFECT_HIT(60),
    EFFECT_RESIST(61),
    FREEZE_RESIST(62),
    TORPOR_RESIST(63),
    DIZZY_RESIST(64),
    FREEZE_SHORTEN(65),
    TORPOR_SHORTEN(66),
    DIZZY_SHORTEN(67),
    MAX_FIRE_ENERGY(70),
    MAX_ELEC_ENERGY(71),
    MAX_WATER_ENERGY(72),
    MAX_GRASS_ENERGY(73),
    MAX_WIND_ENERGY(74),
    MAX_ICE_ENERGY(75),
    MAX_ROCK_ENERGY(76),
    SKILL_CD_MINUS_RATIO(80),
    SHIELD_COST_MINUS_RATIO(81),
    CUR_FIRE_ENERGY(1000),
    CUR_ELEC_ENERGY(1001),
    CUR_WATER_ENERGY(1002),
    CUR_GRASS_ENERGY(1003),
    CUR_WIND_ENERGY(1004),
    CUR_ICE_ENERGY(1005),
    CUR_ROCK_ENERGY(1006),
    CUR_HP(1010),
    MAX_HP(2000),
    CUR_ATK(2001),
    CUR_DEF(2002),
    CUR_SPEED(2003),
    NONEXTRA_ATK(3000),
    NONEXTRA_DEF(3001),
    NONEXTRA_CRITICAL(3002),
    NONEXTRA_ANTI_CRITICAL(3003),
    NONEXTRA_CRITICAL_HURT(3004),
    NONEXTRA_ER(3005),
    NONEXTRA_ELEMENT_MASTERY(3006),
    NONEXTRA_PHYSICAL_SUB_HURT(3007),
    NONEXTRA_FIRE_ADD_HURT(3008),
    NONEXTRA_ELEC_ADD_HURT(3009),
    NONEXTRA_WATER_ADD_HURT(3010),
    NONEXTRA_GRASS_ADD_HURT(3011),
    NONEXTRA_WIND_ADD_HURT(3012),
    NONEXTRA_ROCK_ADD_HURT(3013),
    NONEXTRA_ICE_ADD_HURT(3014),
    NONEXTRA_FIRE_SUB_HURT(3015),
    NONEXTRA_ELEC_SUB_HURT(3016),
    NONEXTRA_WATER_SUB_HURT(3017),
    NONEXTRA_GRASS_SUB_HURT(3018),
    NONEXTRA_WIND_SUB_HURT(3019),
    NONEXTRA_ROCK_SUB_HURT(3020),
    NONEXTRA_ICE_SUB_HURT(3021),
    NONEXTRA_SKILL_CD_MINUS_RATIO(3022),
    NONEXTRA_SHIELD_COST_MINUS_RATIO(3023),
    NONEXTRA_PHYSICAL_ADD_HURT(3024);

    companion object {
        fun from(type: FightProperty): Stat =
            values().find { it.id == type.id }!!
    }
}